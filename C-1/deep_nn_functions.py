# -*- coding: utf-8 -*-
"""C-1 week 4 Building NN Funcs .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijjmu9Lip-sxLPb-0uWX5M_NFhGRH1GO
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import h5py
import matplotlib.pyplot as plt


def sigmoid(Z):
    A = 1/(1+np.exp(-Z))
    cache = Z
    
    return A, cache

def relu(Z):
    A = np.maximum(0,Z)
    
    assert(A.shape == Z.shape)
    
    cache = Z
    return A, cache


def relu_backward(dA, cache):
    Z = cache
    dZ = np.array(dA, copy=True) # just converting dz to a correct object.
    
    # When z <= 0, you should set dz to 0 as well.
    dZ[Z <= 0] = 0
    
    assert (dZ.shape == Z.shape)
    
    return dZ

def sigmoid_backward(dA, cache):
    Z = cache
    
    s = 1/(1+np.exp(-Z))
    dZ = dA * s * (1-s)
    
    assert (dZ.shape == Z.shape)
    
    return dZ

np.random.seed(1)

# 2 layer NN intialise
def initialize_parameters(n_x, n_h, n_y):
  np.random.seed(1)
  W1 = np.random.randn(n_h, n_x) *0.01
  b1 = np.zeros((n_h,1))
  W2 = np.random.randn(n_y,n_h)*0.01
  b2 = np.zeros((n_y,1))

  assert(W1.shape == (n_h, n_x))
  assert(W2.shape == (n_y, n_h))
  assert(b1.shape == (n_h, 1))
  assert(b2.shape == (n_y, 1))

  parameters = {
      "W1": W1,
      "W2": W2,
      "b1": b1,
      "b2": b2
  }
  return parameters

# initialize for L layer NN
def initialize_parameters_deep(layer_dims):
  # layer_dims contains the array of dimension of each layer

  np.random.seed(1)
  parameters = {}
  L = len(layer_dims) # number of layers in network

  for l in range(1, L):
    parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1])/np.sqrt(layer_dims[l-1])
    parameters['b' + str(l)] = np.zeros((layer_dims[l],1))

    assert(parameters['W' + str(l)].shape == (layer_dims[l], layer_dims[l-1]))
    assert(parameters['b' + str(l)].shape == (layer_dims[l], 1))

  return parameters

# linear forward
# z = Wa^[l-1] + b

def linear_forward(A, W, b):

  Z = np.dot(W, A) + b

  assert(Z.shape == (W.shape[0], A.shape[1]))
  cache = (A, W, b)
  return Z, cache

# linear activation forward
def linear_activation_forward(A_prev, W, b, activation):
  if activation == 'sigmoid':
    Z, linear_cache = linear_forward(A_prev, W, b)
    A, activation_cache = sigmoid(Z)
  elif activation == 'relu':
    Z, linear_cache = linear_forward(A_prev, W, b)
    A, activation_cache = relu(Z) # activation_cache has value of z

  assert (A.shape == (W.shape[0], A_prev.shape[1]))
  cache = (linear_cache, activation_cache)

  return A, cache

# L layer model
def L_model_forward(X, parameters):
  # cache contains A[L-1], W[L], b[L], Z[l]
  caches = []
  A = X # input matrix (n_x,m)
  L = len(parameters) // 2 #no of layers in the neural network
  # relu function on L-1 layers
  for l in range(1, L):
    A_prev = A
    A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], 'relu')
    caches.append(cache)
  # sigmoid function on the Lth layer
  AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], 'sigmoid')
  caches.append(cache)

  assert(AL.shape == (1, X.shape[1]))

  return AL, caches

# computing the cost function
def compute_cost(AL, Y):
  # AL is the last activation that is equivalent to yhat
  # Y true labels

  m = Y.shape[1]
  cost = (-1/m)*(np.dot(Y, np.log(AL).T) + np.dot((1-Y), np.log((1-AL)).T))
  cost = np.squeeze(cost)
  assert(cost.shape == ())
  return cost

# linear backward propagation 
def linear_backward(dZ, cache):
  # cache contains A[l-1], W[l], b[l] for the current layer
  A_prev, W, b = cache
  m = A_prev.shape[1]

  dW = (1/m) * np.dot(dZ, A_prev.T)
  db = (1/m) * np.sum(dZ, axis=1, keepdims=True)
  dA_prev = np.dot(W.T, dZ)

  assert(dA_prev.shape == A_prev.shape)
  assert(dW.shape == W.shape)
  assert(db.shape == b.shape)

  return dA_prev, dW, db

# linear activation backward propagation
def linear_activation_backward(dA, cache, activation):
  linear_cache, activation_cache = cache
  if activation == 'relu':
    dZ = relu_backward(dA, activation_cache)
  elif activation == 'sigmoid':
    dZ = sigmoid_backward(dA, activation_cache)
  
  dA_prev, dW, db = linear_backward(dZ, linear_cache)
  return dA_prev, dW, db

# backward propagation for L layers
def L_model_backward(AL, Y, caches):
  # cache contains A[l-1], W[l], b[l], Z[l]
  grads = {}
  L = len(caches)
  m = AL.shape[1]
  Y = Y.reshape(AL.shape) # to match dimensions of Y and Al

  # initialising 
  dAL = -(np.divide(Y, AL)-np.divide(1-Y, 1-AL))

  # handling the Lth layer sigmoid function
  current_cache = caches[L-1]
  grads['dA' + str(L-1)], grads['dW' + str(L)], grads['db' + str(L)] = linear_activation_backward(dAL, current_cache, 'sigmoid')

  # handling all the hidden layers 1...L-1
  for l in reversed(range(L-1)):
    current_cache = caches[l]
    grads['dA' + str(l)], grads['dW' + str(l+1)], grads['db' + str(l+1)] = linear_activation_backward(grads['dA' + str(l+1)], current_cache, 'relu')
  
  return grads

# updating the parameters 
def update_parameters(parameters, grads, learning_rate):
  L = len(parameters) // 2
  for l in range(L):
    parameters['W' + str(l+1)] = parameters['W' + str(l+1)] - learning_rate * grads['dW' + str(l+1)]
    parameters['b' + str(l+1)] = parameters['b' + str(l+1)] - learning_rate * grads['db' + str(l+1)]
  
  return parameters


def predict(X, y, parameters):
    """
    This function is used to predict the results of a  L-layer neural network.
    
    Arguments:
    X -- data set of examples you would like to label
    parameters -- parameters of the trained model
    
    Returns:
    p -- predictions for the given dataset X
    """
    
    m = X.shape[1]
    n = len(parameters) // 2 # number of layers in the neural network
    p = np.zeros((1,m))
    
    # Forward propagation
    probas, caches = L_model_forward(X, parameters)

    
    # convert probas to 0/1 predictions
    for i in range(0, probas.shape[1]):
        if probas[0,i] > 0.5:
            p[0,i] = 1
        else:
            p[0,i] = 0
    
    #print results
    #print ("predictions: " + str(p))
    #print ("true labels: " + str(y))
    print("Accuracy: "  + str(np.sum((p == y)/m)))
        
    return p


def print_mislabeled_images(classes, X, y, p):
    """
    Plots images where predictions and truth were different.
    X -- dataset
    y -- true labels
    p -- predictions
    """
    a = p + y
    mislabeled_indices = np.asarray(np.where(a == 1))
    plt.rcParams['figure.figsize'] = (40.0, 40.0) # set default size of plots
    num_images = len(mislabeled_indices[0])
    for i in range(num_images):
        index = mislabeled_indices[1][i]
        
        plt.subplot(2, num_images, i + 1)
        plt.imshow(X[:,index].reshape(64,64,3), interpolation='nearest')
        plt.axis('off')
        plt.title("Prediction: " + classes[int(p[0,index])].decode("utf-8") + " \n Class: " + classes[y[0,index]].decode("utf-8"))
